@mixin transition($properties) {
	-webkit-transition: $properties;
	-moz-transition: $properties;
	-ms-transition: $properties;
	-o-transition: $properties;
	transition: $properties;
} 

@mixin transform($properties) {
	-webkit-transform: $properties;
	-moz-transform: $properties;
	-ms-transform: $properties;
	-o-transform: $properties;
	transform: $properties;
} 

@mixin box-shadow($properties) {
	-webkit-box-shadow: $properties;
	-moz-box-shadow: $properties;
	-ms-box-shadow: $properties;
	-o-box-shadow: $properties;
	box-shadow: $properties;
} 

@mixin animation($properties...) {
	-webkit-animation: $properties;
	-moz-animation: $properties;
	-ms-animation: $properties;
	-o-animation: $properties;
	animation: $properties;
}

@mixin keyframes($keyframesName) {
	@-webkit-keyframes #{$keyframesName} {
			@content;
	}

	@-moz-keyframes #{$keyframesName} {
			@content;
	}

	@keyframes #{$keyframesName} {
			@content;
	}
}

@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox { @include flexbox; }

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;		
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
	$fg-boxflex: $fg;
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}
	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

@mixin respond-to($value) {
	@if $value == 'lg' {
		@media screen and (max-width: 1199px) {
			@content;
		}
	}
	@if $value == 'md-lg' {
		@media screen and (max-width: 1199px) {
			@content;
		}
	}
	@if $value == 'sm' {
		@media screen and (max-width: 991px) {
			@content;
		}
	}
	@if $value == 'xs' {
		@media screen and (max-width: 767px) {
			@content;
		}
	}
	@if $value == 'md-xlg' {
		@media screen and (min-width: 1366px) {
			@content;
		}
	}
}